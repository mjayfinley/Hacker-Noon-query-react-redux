{"version":3,"sources":["constants/actionTypes.js","selectors/story.js","components/Story.js","actions/archive.js","components/Stories.js","actions/story.js","components/Button.js","components/SearchStories.js","components/App.js","reducers/story.js","reducers/archive.js","reducers/index.js","api/story.js","sagas/story.js","sagas/index.js","store/index.js","serviceWorker.js","index.js"],"names":["STORY_ARCHIVE","STORIES_FETCH","STORIES_FETCH_ERROR","STORIES_ADD","getReadableStories","_ref","archiveIds","storyState","archiveState","stories","filter","story","indexOf","objectID","connect","dispatch","onArchive","id","type","doArchiveStory","columns","title","url","author","num_comments","points","react_default","a","createElement","className","style","width","href","comments","archive","onClick","COLUMNS","label","state","error","_ref2","Object","keys","map","key","src_components_Story","doAddStories","doFetchErrorStories","Button","_ref2$type","children","SearchStories","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","query","onChange","bind","assertThisInitialized","onSubmit","event","onFetchStories","setState","preventDefault","value","target","components_Button","Component","doFetchStories","App","components_SearchStories","src_components_Stories","INITIAL_STATE","applyAddStories","action","applyFetchErrorStories","storyReducer","arguments","length","undefined","applyArchiveStory","concat","toConsumableArray","archiveReducer","rootReducer","combineReducers","fetchStories","fetch","then","response","json","handleFetchStories","result","regenerator_default","wrap","_context","prev","next","sent","put","hits","t0","stop","_marked","watchAll","all","takeEvery","sagas_marked","composeEnhanhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","saga","createSagaMiddleware","store","createStore","applyMiddleware","thunk","run","rootSaga","Boolean","location","hostname","match","render","ReactDOM","es","src_components_App","document","getElementById","subscribe","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.268b5fa2.chunk.js","sourcesContent":["export const STORY_ARCHIVE = 'STORY_ARCHIVE'\nexport const STORIES_FETCH = 'STORIES_FETCH'\nexport const STORIES_FETCH_ERROR = 'STORIES_FETCH_ERROR'\nexport const STORIES_ADD = 'STORIES_ADD'\n","const isNotArchived = archiveIds => story =>\n  archiveIds.indexOf(story.objectID) === -1;\n\nconst getReadableStories = ({ storyState, archiveState }) =>\n  storyState.stories.filter(isNotArchived(archiveState));\n\nconst getFetchError = ({ storyState }) =>\n  storyState.error;\n\nexport {\n  getReadableStories,\n  getFetchError,\n}\n","import React from 'react';\nimport './Story.css';\nimport { connect } from 'react-redux';\nimport { doArchiveStory } from '../actions/archive';\n\nconst Story = ({ story, columns, onArchive }) => {\n  const {\n    title,\n    url,\n    author,\n    num_comments,\n    points,\n    objectID,\n  } = story;\n\n  return (\n    <div className='story'>\n      <span style={{ width: columns.title.width }}>\n        <a href={url}>{title}</a>\n      </span>\n      <span style={{ width: columns.author.width }}>{author}</span>\n      <span style={{ width: columns.comments.width }}>{num_comments}</span>\n      <span style={{ width: columns.points.width }}>{points}</span>\n      <span style={{ width: columns.archive.width }}>\n        <button\n          type='button'\n          className='button-inline'\n          onClick={() => onArchive(objectID)}\n        >\n          Archive\n        </button>\n      </span>\n    </div>\n  )\n}\n\nconst mapDispatchToProps = dispatch => ({\n  onArchive: id => dispatch(doArchiveStory(id))\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(Story);\n","import { STORY_ARCHIVE } from '../constants/actionTypes';\n\nconst doArchiveStory = id => ({\n  type: STORY_ARCHIVE,\n  id,\n})\n\nexport {\n  doArchiveStory,\n}\n","import React from 'react';\nimport './Stories.css';\n\nimport { connect } from 'react-redux';\nimport { doArchiveStory } from '../actions/archive';\nimport {\n  getReadableStories,\n  getFetchError,\n } from '../selectors/story';\n\nimport Story from './Story';\n\nconst COLUMNS = {\n  title: {\n    label: 'Title',\n    width: '40%',\n  },\n  author: {\n    label: 'Author',\n    width: '30%',\n  },\n  comments: {\n    label: 'Comments',\n    width: '10%',\n  },\n  points: {\n    label: 'Points',\n    width: '10%',\n  },\n  archive: {\n    width: '10%',\n  },\n}\n\nconst Stories = ({ stories, error }) =>\n  <div className='stories'>\n    <div className='stories-header'>\n      {Object.keys(COLUMNS).map(key =>\n        <span\n          key={key}\n          style={{ width: COLUMNS[key].width }}\n        >\n          {COLUMNS[key].label}\n        </span>\n      )}\n    </div>\n\n    { error && <p className='error'>Something went wrong...</p> }\n    {(stories || []).map(story =>\n      <Story\n        key={story.objectID}\n        story={story}\n        columns={COLUMNS}\n      />\n    )}\n  </div>\n\nconst mapStateToProps = state => ({\n  stories: getReadableStories(state),\n  error: getFetchError(state),\n})\n\n\nexport default connect(\n  mapStateToProps,\n)(Stories);\n","import {\n  STORIES_ADD,\n  STORIES_FETCH,\n  STORIES_FETCH_ERROR,\n} from '../constants/actionTypes';\n\nconst doAddStories = stories => ({\n  type: STORIES_ADD,\n  stories,\n})\n\nconst doFetchStories = query => ({\n  type: STORIES_FETCH,\n  query,\n})\n\nconst doFetchErrorStories = error => ({\n  type: STORIES_FETCH_ERROR,\n  error,\n})\n\nexport {\n  doAddStories,\n  doFetchStories,\n  doFetchErrorStories,\n}\n","import React from 'react';\n\nconst ButtonInLine = ({\n  onClick,\n  type = 'button',\n  children\n}) =>\n  <Button\n    type={type}\n    className='button-inline'\n    onClick={onClick}\n  >\n    {children}\n  </Button>\n\nconst Button = ({\n  onClick,\n  className,\n  type = 'button',\n  children\n}) =>\n  <button\n    type={type}\n    className={className}\n    onClick={onClick}\n  >\n    {children}\n  </button>\n\nexport default Button;\n\nexport {\n  ButtonInLine\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux';\nimport { doFetchStories } from '../actions/story'\nimport Button from './Button';\n\nclass SearchStories extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      query: '',\n    }\n\n    this.onChange = this.onChange.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n  }\n\n  onSubmit(event) {\n    const { query } = this.state;\n    if (query) {\n      this.props.onFetchStories(query)\n\n      this.setState({ query: '' })\n    }\n\n    event.preventDefault();\n  }\n\n  onChange(event) {\n    const { value } = event.target;\n    this.setState({ query: value })\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.onSubmit}>\n        <input\n          type='text'\n          value={this.state.query}\n          onChange={this.onChange}\n        />\n        <Button type='submit'>\n          Search\n        </Button>\n      </form>\n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  onFetchStories: query => dispatch(doFetchStories(query)),\n})\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(SearchStories);\n","import React from 'react';\nimport './App.css';\n\nimport Stories from './Stories';\nimport SearchStories from './SearchStories';\n\nconst App = () =>\n  <div className='app'>\n    <div className='interactions'>\n      <SearchStories />\n    </div>\n    <Stories />\n  </div>\n\nexport default App;\n","import {\n  STORIES_ADD,\n  STORIES_FETCH_ERROR,\n } from '../constants/actionTypes';\n\nconst INITIAL_STATE = {\n  stories: [],\n  error: null,\n}\n\nconst applyAddStories = (state, action) => ({\n  stories: action.stories,\n  error: null,\n})\n\nconst applyFetchErrorStories = (state, action) => ({\n  stories: [],\n  error: action.error,\n})\n\n\nfunction storyReducer(state = INITIAL_STATE, action) {\n  switch(action.type) {\n    case STORIES_ADD : {\n      return applyAddStories(state, action)\n    }\n    case STORIES_FETCH_ERROR : {\n      return applyFetchErrorStories(state, action);\n    }\n    default : return state;\n  }\n}\n\nexport default storyReducer;\n","import { STORY_ARCHIVE } from '../constants/actionTypes';\n\nconst INITIAL_STATE = [];\n\nconst applyArchiveStory = (state, action) =>\n  [ ...state, action.id ];\n\nfunction archiveReducer(state = INITIAL_STATE, action) {\n  switch(action.type) {\n    case STORY_ARCHIVE : {\n      return applyArchiveStory(state, action);\n    }\n    default : return state;\n  }\n}\n\nexport default archiveReducer;\n","import { combineReducers } from 'redux';\nimport storyReducer from './story';\nimport archiveReducer from './archive';\n\nconst rootReducer = combineReducers({\n  storyState: storyReducer,\n  archiveState: archiveReducer,\n})\n\n\nexport default rootReducer;\n","const HN_BASE_URL = 'http://hn.algolia.com/api/v1/search?query=';\n\nconst fetchStories = query =>\n  fetch(HN_BASE_URL + query)\n    .then(response => response.json());\n\nexport {\n  fetchStories,\n}\n","import { call, put } from 'redux-saga/effects'\nimport { doAddStories, doFetchErrorStories } from '../actions/story'\nimport { fetchStories } from '../api/story';\n\nfunction* handleFetchStories(action) {\n  const { query } = action;\n\n  try {\n    const result = yield call(fetchStories, query);\n    yield put(doAddStories(result.hits))\n  } catch (error) {\n    yield put(doFetchErrorStories(error))\n  }\n}\n\nexport {\n  handleFetchStories,\n}\n","import { takeEvery, all } from 'redux-saga/effects'\nimport { STORIES_FETCH } from '../constants/actionTypes';\nimport { handleFetchStories } from './story'\n\nfunction *watchAll() {\n  yield all([\n    takeEvery(STORIES_FETCH, handleFetchStories)\n  ])\n}\n\n\nexport default watchAll;\n","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk'\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst composeEnhanhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst saga = createSagaMiddleware();\n\nconst store = createStore(\n  rootReducer, composeEnhanhancers(applyMiddleware(saga, thunk))\n);\n\nsaga.run(rootSaga)\n\nexport default store;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport './index.css';\nimport App from './components/App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\n\nfunction render() {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.getElementById('root'));\n\n}\n\nstore.subscribe(render);\nrender();\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n// stories={getReadableStories(store.getState())}\n// onArchive={id => store.dispatch(doArchiveStory(id))}\n"],"sourceRoot":""}